//Historic
        public void TeamInsert(NBAdbToolboxHistoric.Team team, int season)
        {
            using (SqlCommand TeamInsert = new SqlCommand("TeamInsert"))
            {
                TeamInsert.Connection = SQLdb;
                TeamInsert.CommandType = CommandType.StoredProcedure;
                TeamInsert.Parameters.AddWithValue("@SeasonID", season);
                TeamInsert.Parameters.AddWithValue("@TeamID", team.teamId);
                TeamInsert.Parameters.AddWithValue("@City", team.teamCity);
                TeamInsert.Parameters.AddWithValue("@Name", team.teamName);
                TeamInsert.Parameters.AddWithValue("@Tricode", team.teamTricode);
                TeamInsert.Parameters.AddWithValue("@Wins", team.teamWins);
                TeamInsert.Parameters.AddWithValue("@Losses", team.teamLosses);
                SQLdb.Open();
                TeamInsert.ExecuteScalar();
                SQLdb.Close();
            }
        }
        public void ArenaInsert(NBAdbToolboxHistoric.Arena arena, int teamID, int season)
        {
            using (SqlCommand ArenaInsert = new SqlCommand("ArenaInsert"))
            {
                ArenaInsert.Connection = SQLdb;
                ArenaInsert.CommandType = CommandType.StoredProcedure;
                ArenaInsert.Parameters.AddWithValue("@SeasonID", season);
                ArenaInsert.Parameters.AddWithValue("@ArenaID", arena.arenaId);
                ArenaInsert.Parameters.AddWithValue("@TeamID", teamID);
                ArenaInsert.Parameters.AddWithValue("@City", arena.arenaCity);
                ArenaInsert.Parameters.AddWithValue("@Country", arena.arenaCountry);
                ArenaInsert.Parameters.AddWithValue("@Name", arena.arenaName);
                ArenaInsert.Parameters.AddWithValue("@PostalCode", arena.arenaPostalCode);
                ArenaInsert.Parameters.AddWithValue("@State", arena.arenaState);
                ArenaInsert.Parameters.AddWithValue("@StreetAddress", arena.arenaStreetAddress);
                ArenaInsert.Parameters.AddWithValue("@Timezone", arena.arenaTimezone);
                SQLdb.Open();
                ArenaInsert.ExecuteScalar();
                SQLdb.Close();
                arenaList.Add((season, arena.arenaId));
            }
        }
        public void OfficialInsert(NBAdbToolboxHistoric.Official official, int season)
        {
            using (SqlCommand ArenaInsert = new SqlCommand("OfficialInsert"))
            {
                ArenaInsert.Connection = SQLdb;
                ArenaInsert.CommandType = CommandType.StoredProcedure;
                ArenaInsert.Parameters.AddWithValue("@SeasonID", season);
                ArenaInsert.Parameters.AddWithValue("@OfficialID", official.personId);
                ArenaInsert.Parameters.AddWithValue("@Name", official.name);
                ArenaInsert.Parameters.AddWithValue("@Number", official.jerseyNum);
                SQLdb.Open();
                ArenaInsert.ExecuteScalar();
                SQLdb.Close();
                officialList.Add((season, official.personId));
            }
        }
        public void GameInsert(NBAdbToolboxHistoric.Game game, int season, string sender)
        {
            using (SqlCommand GameInsert = new SqlCommand("GameInsert"))
            {
                GameInsert.Connection = SQLdb;
                GameInsert.CommandType = CommandType.StoredProcedure;
                GameInsert.Parameters.AddWithValue("@SeasonID", season);
                GameInsert.Parameters.AddWithValue("@GameID", game.game_id);
                GameInsert.Parameters.AddWithValue("@Date", SqlDateTime.Parse(game.box.gameEt.Remove(game.box.gameEt.IndexOf('T'))));
                GameInsert.Parameters.AddWithValue("@HomeID", game.box.homeTeamId);
                GameInsert.Parameters.AddWithValue("@HScore", game.box.homeTeam.score);
                GameInsert.Parameters.AddWithValue("@AwayID", game.box.awayTeamId);
                GameInsert.Parameters.AddWithValue("@AScore", game.box.awayTeam.score);
                if (game.box.homeTeam.score > game.box.awayTeam.score)
                {
                    GameInsert.Parameters.AddWithValue("@WinnerID", game.box.homeTeamId);
                    GameInsert.Parameters.AddWithValue("@WScore", game.box.homeTeam.score);
                    GameInsert.Parameters.AddWithValue("@LoserID", game.box.awayTeamId);
                    GameInsert.Parameters.AddWithValue("@LScore", game.box.awayTeam.score);
                }
                else
                {
                    GameInsert.Parameters.AddWithValue("@WinnerID", game.box.awayTeamId);
                    GameInsert.Parameters.AddWithValue("@WScore", game.box.awayTeam.score);
                    GameInsert.Parameters.AddWithValue("@LoserID", game.box.homeTeamId);
                    GameInsert.Parameters.AddWithValue("@LScore", game.box.homeTeam.score);
                }
                if (sender == "Regular Season")
                {
                    GameInsert.Parameters.AddWithValue("@GameType", "RS");
                    GameInsert.Parameters.AddWithValue("@SeriesID", SqlString.Null);
                }
                else
                {
                    GameInsert.Parameters.AddWithValue("@GameType", "PS");
                    GameInsert.Parameters.AddWithValue("@SeriesID", "placeholder");
                }
                SqlDateTime datetime = SqlDateTime.Parse(game.box.gameTimeUTC);
                string insert = "Insert into Game(SeasonID, GameID, Date, HomeID, HScore, AwayID, AScore, Label, LabelDetail, Datetime, ";
                string values = ") values(" + season + ", " + game.game_id + ", '" + SqlDateTime.Parse(game.box.gameEt.Remove(game.box.gameEt.IndexOf('T'))) + "', " + game.box.homeTeamId + ", " + game.box.homeTeam.score
                    + ", " + game.box.awayTeamId + ", " + game.box.awayTeam.score + ", '" + game.box.gameLabel + "', '" + game.box.gameSubLabel + "', '" + datetime + "', ";
                insert += "WinnerID, WScore, LoserID, Lscore, GameType, SeriesID";
                if (game.box.homeTeam.score > game.box.awayTeam.score)
                {
                    values += game.box.homeTeamId + ", " + game.box.homeTeam.score + ", " + game.box.awayTeamId + ", " + game.box.awayTeam.score + ", ";
                }
                else
                {
                    values += game.box.awayTeamId + ", " + game.box.awayTeam.score + ", " + game.box.homeTeamId + ", " + game.box.homeTeam.score + ", ";
                }
                if (sender == "Regular Season")
                {
                    values += "'RS', null)";
                }
                else
                {
                    values += "'PS', 'placeholder')";
                }
                GameInsert.Parameters.AddWithValue("@Label", game.box.gameLabel);
                GameInsert.Parameters.AddWithValue("@LabelDetail", game.box.gameSubLabel);
                GameInsert.Parameters.AddWithValue("@Datetime", datetime);
                SQLdb.Open();
                GameInsert.ExecuteScalar();
                SQLdb.Close();
            }
        }
        public void PlayerInsert(NBAdbToolboxHistoric.Player player, int season, string number)
        {
            using (SqlCommand PlayerInsert = new SqlCommand("PlayerInsert"))
            {
                PlayerInsert.Connection = SQLdb;
                PlayerInsert.CommandType = CommandType.StoredProcedure;
                PlayerInsert.Parameters.AddWithValue("@SeasonID", season);
                PlayerInsert.Parameters.AddWithValue("@PlayerID", player.personId);
                PlayerInsert.Parameters.AddWithValue("@Name", player.firstName + " " + player.familyName);
                PlayerInsert.Parameters.AddWithValue("@Number", number);                
                PlayerInsert.Parameters.AddWithValue("@position", player.position);
                SQLdb.Open();
                PlayerInsert.ExecuteScalar();
                SQLdb.Close();
                playerList.Add((season, player.personId));
            }
        }
        public void InactiveInsert(NBAdbToolboxHistoric.Inactive inactive, int season)
        {
            using (SqlCommand InactiveInsert = new SqlCommand("InactiveInsert"))
            {
                InactiveInsert.Connection = SQLdb;
                InactiveInsert.CommandType = CommandType.StoredProcedure;
                InactiveInsert.Parameters.AddWithValue("@SeasonID", season);
                InactiveInsert.Parameters.AddWithValue("@PlayerID", inactive.personId);
                InactiveInsert.Parameters.AddWithValue("@Name", inactive.firstName + " " + inactive.familyName);
                SQLdb.Open();
                InactiveInsert.ExecuteScalar();
                SQLdb.Close();
                playerList.Add((season, inactive.personId));
            }
        }
        public void TeamBoxInsert(NBAdbToolboxHistoric.Team team, int season, string GameID, int MatchupID, int PointsAgainst, string procedure, NBAdbToolboxHistoric.Lineups lineup)
        {
            using (SqlCommand TeamBoxInsert = new SqlCommand(procedure))
            {
                TeamBoxInsert.Connection = SQLdb;
                TeamBoxInsert.CommandType = CommandType.StoredProcedure;
                TeamBoxInsert.Parameters.AddWithValue("@SeasonID", season);
                TeamBoxInsert.Parameters.AddWithValue("@GameID", Int32.Parse(GameID));
                TeamBoxInsert.Parameters.AddWithValue("@TeamID", team.teamId);
                TeamBoxInsert.Parameters.AddWithValue("@MatchupID", MatchupID);

                if (procedure == "TeamBoxLineupInsertHistoric")
                {
                    int minutes = 0;
                    int seconds = 0;
                    TeamBoxInsert.Parameters.AddWithValue("@Unit", lineup.unit.Substring(0, 1).ToUpper() + lineup.unit.Substring(1));
                    if (lineup.unit == "bench")
                    {
                        for (int i = 0; i < team.players.Count; i++)
                        {
                            if (team.players[i].position == "" && team.players[i].statistics.minutes != "")
                            {
                                minutes += Int32.Parse(team.players[i].statistics.minutes.Remove(team.players[i].statistics.minutes.IndexOf(":")));
                                seconds += Int32.Parse(team.players[i].statistics.minutes.Substring(team.players[i].statistics.minutes.IndexOf(":") + 1));
                            }
                        }
                        double secondsDiv = (double)seconds % 60;
                        double minutesWhole = Math.Floor((double)(seconds / 60));
                        minutes += (int)(minutesWhole);
                        seconds = (int)secondsDiv;
                        TeamBoxInsert.Parameters.AddWithValue("@Minutes", minutes + ":" + seconds + ".00");
                    }
                    else
                    {
                        TeamBoxInsert.Parameters.AddWithValue("@Minutes", lineup.minutes + ".00");
                    }
                    TeamBoxInsert.Parameters.AddWithValue("@FGM", lineup.fieldGoalsMade);
                    TeamBoxInsert.Parameters.AddWithValue("@FGA", lineup.fieldGoalsAttempted);
                    TeamBoxInsert.Parameters.AddWithValue("@FGpct", lineup.fieldGoalsPercentage);
                    TeamBoxInsert.Parameters.AddWithValue("@FG2M", lineup.fieldGoalsMade - lineup.threePointersMade);
                    TeamBoxInsert.Parameters.AddWithValue("@FG2A", lineup.fieldGoalsAttempted - lineup.threePointersAttempted);
                    if ((double)(lineup.fieldGoalsAttempted - lineup.threePointersAttempted) != 0)
                    {
                        TeamBoxInsert.Parameters.AddWithValue("@FG2pct", Math.Round((double)(lineup.fieldGoalsMade - lineup.threePointersMade) /
                        (double)(lineup.fieldGoalsAttempted - lineup.threePointersAttempted), 4));
                    }
                    else
                    {
                        TeamBoxInsert.Parameters.AddWithValue("@FG2pct", 0);
                    }
                    TeamBoxInsert.Parameters.AddWithValue("@FG3M", lineup.threePointersMade);
                    TeamBoxInsert.Parameters.AddWithValue("@FG3A", lineup.threePointersAttempted);
                    TeamBoxInsert.Parameters.AddWithValue("@FG3pct", lineup.threePointersPercentage);
                    TeamBoxInsert.Parameters.AddWithValue("@FTM", lineup.freeThrowsMade);
                    TeamBoxInsert.Parameters.AddWithValue("@FTA", lineup.freeThrowsAttempted);
                    TeamBoxInsert.Parameters.AddWithValue("@FTpct", lineup.freeThrowsPercentage);
                    TeamBoxInsert.Parameters.AddWithValue("@RebD", lineup.reboundsDefensive);
                    TeamBoxInsert.Parameters.AddWithValue("@RebO", lineup.reboundsOffensive);
                    TeamBoxInsert.Parameters.AddWithValue("@RebT", lineup.reboundsTotal);
                    TeamBoxInsert.Parameters.AddWithValue("@Assists", lineup.assists);
                    TeamBoxInsert.Parameters.AddWithValue("@Turnovers", lineup.turnovers);
                    if (lineup.turnovers > 0)
                    {
                        TeamBoxInsert.Parameters.AddWithValue("@AtoR", Math.Round((double)(lineup.assists) / (double)(lineup.turnovers), 3));
                    }
                    else
                    {
                        TeamBoxInsert.Parameters.AddWithValue("@AtoR", 99);
                    }
                    TeamBoxInsert.Parameters.AddWithValue("@Steals", lineup.steals);
                    TeamBoxInsert.Parameters.AddWithValue("@Blocks", lineup.blocks);
                    TeamBoxInsert.Parameters.AddWithValue("@Points", lineup.points);
                    TeamBoxInsert.Parameters.AddWithValue("@FoulsPersonal", lineup.foulsPersonal);
                }
                else if (procedure == "TeamBoxInsertHistoric")
                {
                    TeamBoxInsert.Parameters.AddWithValue("@FGM", team.statistics.fieldGoalsMade);
                    TeamBoxInsert.Parameters.AddWithValue("@FGA", team.statistics.fieldGoalsAttempted);
                    TeamBoxInsert.Parameters.AddWithValue("@FGpct", team.statistics.fieldGoalsPercentage);
                    TeamBoxInsert.Parameters.AddWithValue("@FG2M", team.statistics.fieldGoalsMade - team.statistics.threePointersMade);
                    TeamBoxInsert.Parameters.AddWithValue("@FG2A", team.statistics.fieldGoalsAttempted - team.statistics.threePointersAttempted);
                    if ((double)(team.statistics.fieldGoalsAttempted - team.statistics.threePointersAttempted) != 0)
                    {
                        TeamBoxInsert.Parameters.AddWithValue("@FG2pct", Math.Round((double)(team.statistics.fieldGoalsMade - team.statistics.threePointersMade) /
                        (double)(team.statistics.fieldGoalsAttempted - team.statistics.threePointersAttempted), 4));
                    }
                    else
                    {
                        TeamBoxInsert.Parameters.AddWithValue("@FG2pct", 0);
                    }
                    TeamBoxInsert.Parameters.AddWithValue("@FG3M", team.statistics.threePointersMade);
                    TeamBoxInsert.Parameters.AddWithValue("@FG3A", team.statistics.threePointersAttempted);
                    TeamBoxInsert.Parameters.AddWithValue("@FG3pct", team.statistics.threePointersPercentage);
                    TeamBoxInsert.Parameters.AddWithValue("@FTM", team.statistics.freeThrowsMade);
                    TeamBoxInsert.Parameters.AddWithValue("@FTA", team.statistics.freeThrowsAttempted);
                    TeamBoxInsert.Parameters.AddWithValue("@FTpct", team.statistics.freeThrowsPercentage);
                    TeamBoxInsert.Parameters.AddWithValue("@RebD", team.statistics.reboundsDefensive);
                    TeamBoxInsert.Parameters.AddWithValue("@RebO", team.statistics.reboundsOffensive);
                    TeamBoxInsert.Parameters.AddWithValue("@RebT", team.statistics.reboundsTotal);
                    TeamBoxInsert.Parameters.AddWithValue("@Assists", team.statistics.assists);
                    TeamBoxInsert.Parameters.AddWithValue("@Turnovers", team.statistics.turnovers);
                    if (team.statistics.turnovers > 0)
                    {
                        TeamBoxInsert.Parameters.AddWithValue("@AtoR", Math.Round((double)(team.statistics.assists) / (double)(team.statistics.turnovers), 3));
                    }
                    else
                    {
                        TeamBoxInsert.Parameters.AddWithValue("@AtoR", 99);
                    }
                    TeamBoxInsert.Parameters.AddWithValue("@Steals", team.statistics.steals);
                    TeamBoxInsert.Parameters.AddWithValue("@Blocks", team.statistics.blocks);
                    TeamBoxInsert.Parameters.AddWithValue("@Points", team.statistics.points);
                    TeamBoxInsert.Parameters.AddWithValue("@FoulsPersonal", team.statistics.foulsPersonal);
                    TeamBoxInsert.Parameters.AddWithValue("@PointsAgainst", PointsAgainst);
                }
                SQLdb.Open();
                TeamBoxInsert.ExecuteScalar();
                SQLdb.Close();
            }

        }
        public void PlayerBoxInsert(NBAdbToolboxHistoric.Game game, NBAdbToolboxHistoric.Player player, int TeamID, int season, string procedure)
        {
            using (SqlCommand PlayerBoxInsert = new SqlCommand(procedure))
            {
                PlayerBoxInsert.Connection = SQLdb;
                PlayerBoxInsert.CommandType = CommandType.StoredProcedure;
                PlayerBoxInsert.Parameters.AddWithValue("@SeasonID", season);
                PlayerBoxInsert.Parameters.AddWithValue("@GameID", Int32.Parse(game.game_id));
                PlayerBoxInsert.Parameters.AddWithValue("@TeamID", TeamID);
                PlayerBoxInsert.Parameters.AddWithValue("@PlayerID", player.personId);
                PlayerBoxInsert.Parameters.AddWithValue("@Minutes", player.statistics.minutes + ".00");
                PlayerBoxInsert.Parameters.AddWithValue("@FGM", player.statistics.fieldGoalsMade);
                PlayerBoxInsert.Parameters.AddWithValue("@FGA", player.statistics.fieldGoalsAttempted);
                PlayerBoxInsert.Parameters.AddWithValue("@FGpct", player.statistics.fieldGoalsPercentage);
                PlayerBoxInsert.Parameters.AddWithValue("@FG2M", player.statistics.fieldGoalsMade - player.statistics.threePointersMade);
                PlayerBoxInsert.Parameters.AddWithValue("@FG2A", player.statistics.fieldGoalsAttempted - player.statistics.threePointersAttempted);
                if ((double)(player.statistics.fieldGoalsAttempted - player.statistics.threePointersAttempted) != 0)
                {
                    PlayerBoxInsert.Parameters.AddWithValue("@FG2pct",
                    Math.Round((double)(player.statistics.fieldGoalsMade - player.statistics.threePointersMade) /
                    (double)(player.statistics.fieldGoalsAttempted - player.statistics.threePointersAttempted), 4));
                }
                else
                {
                    PlayerBoxInsert.Parameters.AddWithValue("@FG2pct", 0);
                }
                PlayerBoxInsert.Parameters.AddWithValue("@FG3M", player.statistics.threePointersMade);
                PlayerBoxInsert.Parameters.AddWithValue("@FG3A", player.statistics.threePointersAttempted);
                PlayerBoxInsert.Parameters.AddWithValue("@FG3pct", player.statistics.threePointersPercentage);
                PlayerBoxInsert.Parameters.AddWithValue("@FTM", player.statistics.freeThrowsMade);
                PlayerBoxInsert.Parameters.AddWithValue("@FTA", player.statistics.freeThrowsAttempted);
                PlayerBoxInsert.Parameters.AddWithValue("@FTpct", player.statistics.freeThrowsPercentage);
                PlayerBoxInsert.Parameters.AddWithValue("@RebD", player.statistics.reboundsDefensive);
                PlayerBoxInsert.Parameters.AddWithValue("@RebO", player.statistics.reboundsOffensive);
                PlayerBoxInsert.Parameters.AddWithValue("@RebT", player.statistics.reboundsTotal);
                PlayerBoxInsert.Parameters.AddWithValue("@Assists", player.statistics.assists);
                PlayerBoxInsert.Parameters.AddWithValue("@Turnovers", player.statistics.turnovers);
                if (player.statistics.turnovers > 0)
                {
                    PlayerBoxInsert.Parameters.AddWithValue("@AtoR", Math.Round((double)(player.statistics.assists) / (double)(player.statistics.turnovers), 3));
                }
                else
                {
                    PlayerBoxInsert.Parameters.AddWithValue("@AtoR", 99);
                }
                PlayerBoxInsert.Parameters.AddWithValue("@Steals", player.statistics.steals);
                PlayerBoxInsert.Parameters.AddWithValue("@Blocks", player.statistics.blocks);
                PlayerBoxInsert.Parameters.AddWithValue("@Points", player.statistics.points);
                PlayerBoxInsert.Parameters.AddWithValue("@FoulsPersonal", player.statistics.foulsPersonal);
                SQLdb.Open();
                PlayerBoxInsert.ExecuteScalar();
                SQLdb.Close();
            }

        }
        public void PlayerBoxUpdate(NBAdbToolboxHistoric.Game game, NBAdbToolboxHistoric.Player player, int TeamID, int season, string procedure)
        {
            using (SqlCommand PlayerBoxUpdate = new SqlCommand(procedure))
            {
                PlayerBoxUpdate.Connection = SQLdb;
                PlayerBoxUpdate.CommandType = CommandType.StoredProcedure;
                PlayerBoxUpdate.Parameters.AddWithValue("@SeasonID", season);
                PlayerBoxUpdate.Parameters.AddWithValue("@GameID", Int32.Parse(game.game_id));
                PlayerBoxUpdate.Parameters.AddWithValue("@TeamID", TeamID);
                PlayerBoxUpdate.Parameters.AddWithValue("@PlayerID", player.personId);
                PlayerBoxUpdate.Parameters.AddWithValue("@Minutes", player.statistics.minutes + ".00");
                PlayerBoxUpdate.Parameters.AddWithValue("@FGM", player.statistics.fieldGoalsMade);
                PlayerBoxUpdate.Parameters.AddWithValue("@FGA", player.statistics.fieldGoalsAttempted);
                PlayerBoxUpdate.Parameters.AddWithValue("@FGpct", player.statistics.fieldGoalsPercentage);
                PlayerBoxUpdate.Parameters.AddWithValue("@FG2M", player.statistics.fieldGoalsMade - player.statistics.threePointersMade);
                PlayerBoxUpdate.Parameters.AddWithValue("@FG2A", player.statistics.fieldGoalsAttempted - player.statistics.threePointersAttempted);
                if ((double)(player.statistics.fieldGoalsAttempted - player.statistics.threePointersAttempted) != 0)
                {
                    PlayerBoxUpdate.Parameters.AddWithValue("@FG2pct",
                    Math.Round((double)(player.statistics.fieldGoalsMade - player.statistics.threePointersMade) /
                    (double)(player.statistics.fieldGoalsAttempted - player.statistics.threePointersAttempted), 4));
                }
                else
                {
                    PlayerBoxUpdate.Parameters.AddWithValue("@FG2pct", 0);
                }
                PlayerBoxUpdate.Parameters.AddWithValue("@FG3M", player.statistics.threePointersMade);
                PlayerBoxUpdate.Parameters.AddWithValue("@FG3A", player.statistics.threePointersAttempted);
                PlayerBoxUpdate.Parameters.AddWithValue("@FG3pct", player.statistics.threePointersPercentage);
                PlayerBoxUpdate.Parameters.AddWithValue("@FTM", player.statistics.freeThrowsMade);
                PlayerBoxUpdate.Parameters.AddWithValue("@FTA", player.statistics.freeThrowsAttempted);
                PlayerBoxUpdate.Parameters.AddWithValue("@FTpct", player.statistics.freeThrowsPercentage);
                PlayerBoxUpdate.Parameters.AddWithValue("@RebD", player.statistics.reboundsDefensive);
                PlayerBoxUpdate.Parameters.AddWithValue("@RebO", player.statistics.reboundsOffensive);
                PlayerBoxUpdate.Parameters.AddWithValue("@RebT", player.statistics.reboundsTotal);
                PlayerBoxUpdate.Parameters.AddWithValue("@Assists", player.statistics.assists);
                PlayerBoxUpdate.Parameters.AddWithValue("@Turnovers", player.statistics.turnovers);
                if (player.statistics.turnovers > 0)
                {
                    PlayerBoxUpdate.Parameters.AddWithValue("@AtoR", Math.Round((double)(player.statistics.assists) / (double)(player.statistics.turnovers), 3));
                }
                else
                {
                    PlayerBoxUpdate.Parameters.AddWithValue("@AtoR", 99);
                }
                PlayerBoxUpdate.Parameters.AddWithValue("@Steals", player.statistics.steals);
                PlayerBoxUpdate.Parameters.AddWithValue("@Blocks", player.statistics.blocks);
                PlayerBoxUpdate.Parameters.AddWithValue("@Points", player.statistics.points);
                PlayerBoxUpdate.Parameters.AddWithValue("@FoulsPersonal", player.statistics.foulsPersonal);
                SQLdb.Open();
                PlayerBoxUpdate.ExecuteScalar();
                SQLdb.Close();
            }
        }
        public void PlayerStagingNew(NBAdbToolboxHistoric.Game game, int season)
        {
            playerTablesInsertString = "";
            foreach (NBAdbToolboxHistoric.Player player in game.box.homeTeam.players)
            {//Home Team
                int index = game.box.homeTeamPlayers.FindIndex(p => p.personId == player.personId);
                if (index == -1)
                {
                    PlayerCheckNew(game, player, season, player.jerseyNum, game.box.homeTeamId, game.box.awayTeamId, Int32.Parse(game.game_id));
                }
                else
                {
                    PlayerCheckNew(game, player, season, game.box.homeTeamPlayers[index].jerseyNum, game.box.homeTeamId, game.box.awayTeamId, Int32.Parse(game.game_id));
                }
                //PlayerBoxCheck(game, player, game.box.homeTeamId, season, "PlayerBoxCheck");
            }
            foreach (NBAdbToolboxHistoric.Player player in game.box.awayTeam.players)
            {//Away Team
                int index = game.box.awayTeamPlayers.FindIndex(p => p.personId == player.personId);
                if (index == -1)
                {
                    PlayerCheckNew(game, player, season, player.jerseyNum, game.box.awayTeamId, game.box.homeTeamId, Int32.Parse(game.game_id));
                }
                else
                {
                    PlayerCheckNew(game, player, season, game.box.awayTeamPlayers[index].jerseyNum, game.box.awayTeamId, game.box.homeTeamId, Int32.Parse(game.game_id));
                }
                //PlayerBoxCheck(game, player, game.box.awayTeamId, season, "PlayerBoxCheck");
            }
            playerTablesInsertString = playerTablesInsertString.Replace("'',", "");
            using (SqlCommand PlayerDataInsert = new SqlCommand(playerTablesInsertString))
            {
                PlayerDataInsert.Connection = SQLdb;
                PlayerDataInsert.CommandType = CommandType.Text;
                SQLdb.Open();
                PlayerDataInsert.ExecuteScalar();
                SQLdb.Close();
            }
        }
        public void PlayerCheckNew(NBAdbToolboxHistoric.Game game, NBAdbToolboxHistoric.Player player, int season, string number, int TeamID, int MatchupID, int GameID)
        {
            string insert = "Insert into Player ";
            string update = "";
            string values = "";
            using (SqlCommand PlayerCheck = new SqlCommand("NewPlayerCheckHistorical"))
            {
                PlayerCheck.CommandType = CommandType.StoredProcedure;
                PlayerCheck.Parameters.AddWithValue("@PlayerID", player.personId);
                PlayerCheck.Parameters.AddWithValue("@SeasonID", season);
                PlayerCheck.Parameters.AddWithValue("@TeamID", TeamID);
                PlayerCheck.Parameters.AddWithValue("@GameID", GameID);
                using (SqlDataAdapter sPlayerSearch = new SqlDataAdapter())
                {
                    PlayerCheck.Connection = SQLdb;
                    sPlayerSearch.SelectCommand = PlayerCheck;
                    SQLdb.Open();
                    SqlDataReader reader = PlayerCheck.ExecuteReader();
                    reader.Read();
                    if (!reader.HasRows) //Insert all
                    {
                        SQLdb.Close();
                        //Player
                        values += "values(" + season + ", " + player.personId + ", '" + player.firstName.Replace("'", "''") + " " + player.familyName.Replace("'", "''") + "', ";
                        if (player.jerseyNum == "")
                        {
                            if (number == "")
                            {
                                values += "null, null, ";
                            }
                            else
                            {
                                values += "'" + number + "', null, ";
                            }
                        }
                        else
                        {
                            values += "'" + player.jerseyNum + "', null, ";
                        }

                        values = values.Remove(values.Length - ", ".Length) + ") ";
                        playerTablesInsertString += insert + values + "\n";
                        //PlayerBox
                        playerTablesInsertString += PlayerBoxString(game, player, TeamID, MatchupID, season);
                        //Starting Lineups
                        playerTablesInsertString += StartingLineupString(season, GameID, TeamID, MatchupID, player.personId, player.position);
                    }
                    else if (reader.HasRows && reader.IsDBNull(1)) //Insert PlayerBox
                    {
                        SQLdb.Close();
                        //PlayerBox
                        playerTablesInsertString += PlayerBoxString(game, player, TeamID, MatchupID, season);

                    }
                    else if (reader.HasRows && reader.GetString(1) != player.statistics.minutes) //Update PlayerBox
                    {
                        SQLdb.Close();

                    }
                    else if (reader.HasRows && reader.IsDBNull(2)) //Insert Starting Lineups
                    {
                        //Starting Lineups
                        SQLdb.Close();
                        playerTablesInsertString += StartingLineupString(season, GameID, TeamID, MatchupID, player.personId, player.position);
                    }
                }
            }
        }
        public string playerTablesInsertString = "";
        public string PlayerBoxString(NBAdbToolboxHistoric.Game game, NBAdbToolboxHistoric.Player player, int TeamID, int MatchupID, int season)
        {
            string insert = "insert into PlayerBox(SeasonID, GameID, TeamID, MatchupID, PlayerID, FGM, FGA, [FG%], FG2M, FG2A, FG3M, FG3A, [FG3%], FTM, FTA, [FT%], " +
                "ReboundsDefensive, ReboundsOffensive, ReboundsTotal, Assists, Turnovers, Steals, Blocks, Points, FoulsPersonal, ";
            string values = ") values(" + season + ", " + game.game_id + ", " + TeamID + ", " + MatchupID + ", " + player.personId + ", " + player.statistics.fieldGoalsMade + ", " + player.statistics.fieldGoalsAttempted
                    + ", " + player.statistics.fieldGoalsPercentage
                    + ", " + (player.statistics.fieldGoalsMade - player.statistics.threePointersMade)
                    + ", " + (player.statistics.fieldGoalsAttempted - player.statistics.threePointersAttempted)
                    + ", " + player.statistics.threePointersMade + ", " + player.statistics.threePointersAttempted + ", " + player.statistics.threePointersPercentage
                    + ", " + player.statistics.freeThrowsMade + ", " + player.statistics.freeThrowsAttempted + ", " + player.statistics.freeThrowsPercentage + ", " + player.statistics.reboundsDefensive
                    + ", " + player.statistics.reboundsOffensive + ", " + player.statistics.reboundsTotal + ", " + player.statistics.assists + ", " + player.statistics.turnovers
                    + ", " + player.statistics.steals + ", " + player.statistics.blocks + ", " + player.statistics.points + ", " + player.statistics.foulsPersonal + ", ";
            if (player.statistics.minutes != "")
            {
                insert += "Minutes, ";
                values += "'" + player.statistics.minutes + "', ";
            }
            else
            {
                insert += "Minutes, ";
                values += "'0', ";
            }

            if ((double)(player.statistics.fieldGoalsAttempted - player.statistics.threePointersAttempted) != 0)
            {
                insert += "[FG2%], ";
                values += Math.Round((double)(player.statistics.fieldGoalsMade - player.statistics.threePointersMade) /
                    (double)(player.statistics.fieldGoalsAttempted - player.statistics.threePointersAttempted), 4) + ", ";
            }
            else
            {
                insert += "[FG2%], ";
                values += "0, ";
            }


            if (player.statistics.turnovers > 0)
            {
                insert += "AssistsTurnoverRatio, ";
                values += Math.Round((double)(player.statistics.assists) / (double)(player.statistics.turnovers), 3) + ", ";
            }
            else
            {
                insert += "AssistsTurnoverRatio, ";
                values += "0, ";
            }
            insert = insert.Remove(insert.Length - ", ".Length);
            values = values.Remove(values.Length - ", ".Length) + ") ";
            return insert + values + "\n";

        }
        public string StartingLineupString(int season, int GameID, int TeamID, int MatchupID, int PlayerID, string position)
        {
            string insert = "insert into StartingLineups values(" + season + ", " + GameID + ", " + TeamID + ", " + MatchupID + ", " + PlayerID + ", '";
            if (position == "")
            {
                insert += "Bench', null)\n";
            }
            else
            {
                insert += "Starters', '" + position + "')\n";
            }
            return insert;
        }